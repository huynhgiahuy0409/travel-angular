{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Input, ViewChild, NgModule } from '@angular/core';\nimport * as QRCode from 'qrcode';\nconst _c0 = [\"qrcElement\"];\n\nclass QRCodeComponent {\n  constructor(renderer) {\n    this.renderer = renderer;\n    this.allowEmptyString = false;\n    this.colorDark = '#000000ff';\n    this.colorLight = '#ffffffff';\n    this.cssClass = 'qrcode';\n    this.elementType = 'canvas';\n    this.errorCorrectionLevel = 'M';\n    this.margin = 4;\n    this.qrdata = '';\n    this.scale = 4;\n    this.width = 10;\n  }\n\n  ngOnChanges() {\n    this.createQRCode();\n  }\n\n  isValidQrCodeText(data) {\n    if (this.allowEmptyString === false) {\n      return !(typeof data === 'undefined' || data === '' || data === 'null' || data === null);\n    }\n\n    return !(typeof data === 'undefined');\n  }\n\n  toDataURL() {\n    return new Promise((resolve, reject) => {\n      QRCode.toDataURL(this.qrdata, {\n        color: {\n          dark: this.colorDark,\n          light: this.colorLight\n        },\n        errorCorrectionLevel: this.errorCorrectionLevel,\n        margin: this.margin,\n        scale: this.scale,\n        version: this.version,\n        width: this.width\n      }, (err, url) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(url);\n        }\n      });\n    });\n  }\n\n  toCanvas(canvas) {\n    return new Promise((resolve, reject) => {\n      QRCode.toCanvas(canvas, this.qrdata, {\n        color: {\n          dark: this.colorDark,\n          light: this.colorLight\n        },\n        errorCorrectionLevel: this.errorCorrectionLevel,\n        margin: this.margin,\n        scale: this.scale,\n        version: this.version,\n        width: this.width\n      }, error => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve('success');\n        }\n      });\n    });\n  }\n\n  toSVG() {\n    return new Promise((resolve, reject) => {\n      QRCode.toString(this.qrdata, {\n        color: {\n          dark: this.colorDark,\n          light: this.colorLight\n        },\n        errorCorrectionLevel: this.errorCorrectionLevel,\n        margin: this.margin,\n        scale: this.scale,\n        type: 'svg',\n        version: this.version,\n        width: this.width\n      }, (err, url) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(url);\n        }\n      });\n    });\n  }\n\n  renderElement(element) {\n    for (const node of this.qrcElement.nativeElement.childNodes) {\n      this.renderer.removeChild(this.qrcElement.nativeElement, node);\n    }\n\n    this.renderer.appendChild(this.qrcElement.nativeElement, element);\n  }\n\n  createQRCode() {\n    // Set sensitive defaults\n    if (this.version && this.version > 40) {\n      console.warn('[angularx-qrcode] max value for `version` is 40');\n      this.version = 40;\n    } else if (this.version && this.version < 1) {\n      console.warn('[angularx-qrcode]`min value for `version` is 1');\n      this.version = 1;\n    } else if (this.version !== undefined && isNaN(this.version)) {\n      console.warn('[angularx-qrcode] version should be a number, defaulting to auto.');\n      this.version = undefined;\n    }\n\n    try {\n      if (!this.isValidQrCodeText(this.qrdata)) {\n        throw new Error('[angularx-qrcode] Field `qrdata` is empty, set `allowEmptyString=\"true\"` to overwrite this behaviour.');\n      } // This is a fix to allow an empty string as qrdata\n\n\n      if (this.isValidQrCodeText(this.qrdata) && this.qrdata === '') {\n        this.qrdata = ' ';\n      }\n\n      let element;\n\n      switch (this.elementType) {\n        case 'canvas':\n          element = this.renderer.createElement('canvas');\n          this.toCanvas(element).then(() => {\n            this.renderElement(element);\n          }).catch(e => {\n            console.error('[angularx-qrcode] canvas error:', e);\n          });\n          break;\n\n        case 'svg':\n          element = this.renderer.createElement('div');\n          this.toSVG().then(svgString => {\n            this.renderer.setProperty(element, 'innerHTML', svgString);\n            const innerElement = element.firstChild;\n            this.renderer.setAttribute(innerElement, 'height', `${this.width}`);\n            this.renderer.setAttribute(innerElement, 'width', `${this.width}`);\n            this.renderElement(innerElement);\n          }).catch(e => {\n            console.error('[angularx-qrcode] svg error:', e);\n          });\n          break;\n\n        case 'url':\n        case 'img':\n        default:\n          element = this.renderer.createElement('img');\n          this.toDataURL().then(dataUrl => {\n            element.setAttribute('src', dataUrl);\n            this.renderElement(element);\n          }).catch(e => {\n            console.error('[angularx-qrcode] img/url error:', e);\n          });\n      }\n    } catch (e) {\n      console.error('[angularx-qrcode] Error generating QR Code:', e.message);\n    }\n  }\n\n}\n\nQRCodeComponent.ɵfac = function QRCodeComponent_Factory(t) {\n  return new (t || QRCodeComponent)(i0.ɵɵdirectiveInject(i0.Renderer2));\n};\n\nQRCodeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: QRCodeComponent,\n  selectors: [[\"qrcode\"]],\n  viewQuery: function QRCodeComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.qrcElement = _t.first);\n    }\n  },\n  inputs: {\n    allowEmptyString: \"allowEmptyString\",\n    colorDark: \"colorDark\",\n    colorLight: \"colorLight\",\n    cssClass: \"cssClass\",\n    elementType: \"elementType\",\n    errorCorrectionLevel: \"errorCorrectionLevel\",\n    margin: \"margin\",\n    qrdata: \"qrdata\",\n    scale: \"scale\",\n    version: \"version\",\n    width: \"width\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 2,\n  vars: 2,\n  consts: [[\"qrcElement\", \"\"]],\n  template: function QRCodeComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.cssClass);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QRCodeComponent, [{\n    type: Component,\n    args: [{\n      selector: 'qrcode',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: `<div #qrcElement [class]=\"cssClass\"></div>`\n    }]\n  }], function () {\n    return [{\n      type: i0.Renderer2\n    }];\n  }, {\n    allowEmptyString: [{\n      type: Input\n    }],\n    colorDark: [{\n      type: Input\n    }],\n    colorLight: [{\n      type: Input\n    }],\n    cssClass: [{\n      type: Input\n    }],\n    elementType: [{\n      type: Input\n    }],\n    errorCorrectionLevel: [{\n      type: Input\n    }],\n    margin: [{\n      type: Input\n    }],\n    qrdata: [{\n      type: Input\n    }],\n    scale: [{\n      type: Input\n    }],\n    version: [{\n      type: Input\n    }],\n    width: [{\n      type: Input\n    }],\n    qrcElement: [{\n      type: ViewChild,\n      args: ['qrcElement', {\n        static: true\n      }]\n    }]\n  });\n})();\n\nclass QRCodeModule {}\n\nQRCodeModule.ɵfac = function QRCodeModule_Factory(t) {\n  return new (t || QRCodeModule)();\n};\n\nQRCodeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: QRCodeModule\n});\nQRCodeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: []\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QRCodeModule, [{\n    type: NgModule,\n    args: [{\n      providers: [],\n      declarations: [QRCodeComponent],\n      exports: [QRCodeComponent]\n    }]\n  }], null, null);\n})();\n\nvar QRCodeErrorCorrectionLevel;\n\n(function (QRCodeErrorCorrectionLevel) {\n  QRCodeErrorCorrectionLevel[\"low\"] = \"low\";\n  QRCodeErrorCorrectionLevel[\"medium\"] = \"medium\";\n  QRCodeErrorCorrectionLevel[\"quartile\"] = \"quartile\";\n  QRCodeErrorCorrectionLevel[\"high\"] = \"high\";\n  QRCodeErrorCorrectionLevel[\"L\"] = \"L\";\n  QRCodeErrorCorrectionLevel[\"M\"] = \"M\";\n  QRCodeErrorCorrectionLevel[\"Q\"] = \"Q\";\n  QRCodeErrorCorrectionLevel[\"H\"] = \"H\";\n})(QRCodeErrorCorrectionLevel || (QRCodeErrorCorrectionLevel = {}));\n\nvar QRCodeElementType;\n\n(function (QRCodeElementType) {\n  QRCodeElementType[\"url\"] = \"url\";\n  QRCodeElementType[\"img\"] = \"img\";\n  QRCodeElementType[\"canvas\"] = \"canvas\";\n  QRCodeElementType[\"svg\"] = \"svg\";\n})(QRCodeElementType || (QRCodeElementType = {}));\n/*\n * Public API Surface of angularx-qrcode\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { QRCodeComponent, QRCodeElementType, QRCodeErrorCorrectionLevel, QRCodeModule };","map":{"version":3,"names":["i0","Component","ChangeDetectionStrategy","Input","ViewChild","NgModule","QRCode","QRCodeComponent","constructor","renderer","allowEmptyString","colorDark","colorLight","cssClass","elementType","errorCorrectionLevel","margin","qrdata","scale","width","ngOnChanges","createQRCode","isValidQrCodeText","data","toDataURL","Promise","resolve","reject","color","dark","light","version","err","url","toCanvas","canvas","error","toSVG","toString","type","renderElement","element","node","qrcElement","nativeElement","childNodes","removeChild","appendChild","console","warn","undefined","isNaN","Error","createElement","then","catch","e","svgString","setProperty","innerElement","firstChild","setAttribute","dataUrl","message","ɵfac","Renderer2","ɵcmp","args","selector","changeDetection","OnPush","template","static","QRCodeModule","ɵmod","ɵinj","providers","declarations","exports","QRCodeErrorCorrectionLevel","QRCodeElementType"],"sources":["E:/Angular/Travel-DATN/travel-angular/node_modules/angularx-qrcode/fesm2015/angularx-qrcode.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, ChangeDetectionStrategy, Input, ViewChild, NgModule } from '@angular/core';\nimport * as QRCode from 'qrcode';\n\nclass QRCodeComponent {\n    constructor(renderer) {\n        this.renderer = renderer;\n        this.allowEmptyString = false;\n        this.colorDark = '#000000ff';\n        this.colorLight = '#ffffffff';\n        this.cssClass = 'qrcode';\n        this.elementType = 'canvas';\n        this.errorCorrectionLevel = 'M';\n        this.margin = 4;\n        this.qrdata = '';\n        this.scale = 4;\n        this.width = 10;\n    }\n    ngOnChanges() {\n        this.createQRCode();\n    }\n    isValidQrCodeText(data) {\n        if (this.allowEmptyString === false) {\n            return !(typeof data === 'undefined' ||\n                data === '' ||\n                data === 'null' ||\n                data === null);\n        }\n        return !(typeof data === 'undefined');\n    }\n    toDataURL() {\n        return new Promise((resolve, reject) => {\n            QRCode.toDataURL(this.qrdata, {\n                color: {\n                    dark: this.colorDark,\n                    light: this.colorLight,\n                },\n                errorCorrectionLevel: this.errorCorrectionLevel,\n                margin: this.margin,\n                scale: this.scale,\n                version: this.version,\n                width: this.width,\n            }, (err, url) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(url);\n                }\n            });\n        });\n    }\n    toCanvas(canvas) {\n        return new Promise((resolve, reject) => {\n            QRCode.toCanvas(canvas, this.qrdata, {\n                color: {\n                    dark: this.colorDark,\n                    light: this.colorLight,\n                },\n                errorCorrectionLevel: this.errorCorrectionLevel,\n                margin: this.margin,\n                scale: this.scale,\n                version: this.version,\n                width: this.width,\n            }, (error) => {\n                if (error) {\n                    reject(error);\n                }\n                else {\n                    resolve('success');\n                }\n            });\n        });\n    }\n    toSVG() {\n        return new Promise((resolve, reject) => {\n            QRCode.toString(this.qrdata, {\n                color: {\n                    dark: this.colorDark,\n                    light: this.colorLight,\n                },\n                errorCorrectionLevel: this.errorCorrectionLevel,\n                margin: this.margin,\n                scale: this.scale,\n                type: 'svg',\n                version: this.version,\n                width: this.width,\n            }, (err, url) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(url);\n                }\n            });\n        });\n    }\n    renderElement(element) {\n        for (const node of this.qrcElement.nativeElement.childNodes) {\n            this.renderer.removeChild(this.qrcElement.nativeElement, node);\n        }\n        this.renderer.appendChild(this.qrcElement.nativeElement, element);\n    }\n    createQRCode() {\n        // Set sensitive defaults\n        if (this.version && this.version > 40) {\n            console.warn('[angularx-qrcode] max value for `version` is 40');\n            this.version = 40;\n        }\n        else if (this.version && this.version < 1) {\n            console.warn('[angularx-qrcode]`min value for `version` is 1');\n            this.version = 1;\n        }\n        else if (this.version !== undefined && isNaN(this.version)) {\n            console.warn('[angularx-qrcode] version should be a number, defaulting to auto.');\n            this.version = undefined;\n        }\n        try {\n            if (!this.isValidQrCodeText(this.qrdata)) {\n                throw new Error('[angularx-qrcode] Field `qrdata` is empty, set `allowEmptyString=\"true\"` to overwrite this behaviour.');\n            }\n            // This is a fix to allow an empty string as qrdata\n            if (this.isValidQrCodeText(this.qrdata) && this.qrdata === '') {\n                this.qrdata = ' ';\n            }\n            let element;\n            switch (this.elementType) {\n                case 'canvas':\n                    element = this.renderer.createElement('canvas');\n                    this.toCanvas(element)\n                        .then(() => {\n                        this.renderElement(element);\n                    })\n                        .catch((e) => {\n                        console.error('[angularx-qrcode] canvas error:', e);\n                    });\n                    break;\n                case 'svg':\n                    element = this.renderer.createElement('div');\n                    this.toSVG()\n                        .then((svgString) => {\n                        this.renderer.setProperty(element, 'innerHTML', svgString);\n                        const innerElement = element.firstChild;\n                        this.renderer.setAttribute(innerElement, 'height', `${this.width}`);\n                        this.renderer.setAttribute(innerElement, 'width', `${this.width}`);\n                        this.renderElement(innerElement);\n                    })\n                        .catch((e) => {\n                        console.error('[angularx-qrcode] svg error:', e);\n                    });\n                    break;\n                case 'url':\n                case 'img':\n                default:\n                    element = this.renderer.createElement('img');\n                    this.toDataURL()\n                        .then((dataUrl) => {\n                        element.setAttribute('src', dataUrl);\n                        this.renderElement(element);\n                    })\n                        .catch((e) => {\n                        console.error('[angularx-qrcode] img/url error:', e);\n                    });\n            }\n        }\n        catch (e) {\n            console.error('[angularx-qrcode] Error generating QR Code:', e.message);\n        }\n    }\n}\nQRCodeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QRCodeComponent, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });\nQRCodeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.5\", type: QRCodeComponent, selector: \"qrcode\", inputs: { allowEmptyString: \"allowEmptyString\", colorDark: \"colorDark\", colorLight: \"colorLight\", cssClass: \"cssClass\", elementType: \"elementType\", errorCorrectionLevel: \"errorCorrectionLevel\", margin: \"margin\", qrdata: \"qrdata\", scale: \"scale\", version: \"version\", width: \"width\" }, viewQueries: [{ propertyName: \"qrcElement\", first: true, predicate: [\"qrcElement\"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: `<div #qrcElement [class]=\"cssClass\"></div>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QRCodeComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'qrcode',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: `<div #qrcElement [class]=\"cssClass\"></div>`,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { allowEmptyString: [{\n                type: Input\n            }], colorDark: [{\n                type: Input\n            }], colorLight: [{\n                type: Input\n            }], cssClass: [{\n                type: Input\n            }], elementType: [{\n                type: Input\n            }], errorCorrectionLevel: [{\n                type: Input\n            }], margin: [{\n                type: Input\n            }], qrdata: [{\n                type: Input\n            }], scale: [{\n                type: Input\n            }], version: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], qrcElement: [{\n                type: ViewChild,\n                args: ['qrcElement', { static: true }]\n            }] } });\n\nclass QRCodeModule {\n}\nQRCodeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QRCodeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nQRCodeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QRCodeModule, declarations: [QRCodeComponent], exports: [QRCodeComponent] });\nQRCodeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QRCodeModule, providers: [] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QRCodeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [],\n                    declarations: [QRCodeComponent],\n                    exports: [QRCodeComponent],\n                }]\n        }] });\n\nvar QRCodeErrorCorrectionLevel;\n(function (QRCodeErrorCorrectionLevel) {\n    QRCodeErrorCorrectionLevel[\"low\"] = \"low\";\n    QRCodeErrorCorrectionLevel[\"medium\"] = \"medium\";\n    QRCodeErrorCorrectionLevel[\"quartile\"] = \"quartile\";\n    QRCodeErrorCorrectionLevel[\"high\"] = \"high\";\n    QRCodeErrorCorrectionLevel[\"L\"] = \"L\";\n    QRCodeErrorCorrectionLevel[\"M\"] = \"M\";\n    QRCodeErrorCorrectionLevel[\"Q\"] = \"Q\";\n    QRCodeErrorCorrectionLevel[\"H\"] = \"H\";\n})(QRCodeErrorCorrectionLevel || (QRCodeErrorCorrectionLevel = {}));\nvar QRCodeElementType;\n(function (QRCodeElementType) {\n    QRCodeElementType[\"url\"] = \"url\";\n    QRCodeElementType[\"img\"] = \"img\";\n    QRCodeElementType[\"canvas\"] = \"canvas\";\n    QRCodeElementType[\"svg\"] = \"svg\";\n})(QRCodeElementType || (QRCodeElementType = {}));\n\n/*\n * Public API Surface of angularx-qrcode\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { QRCodeComponent, QRCodeElementType, QRCodeErrorCorrectionLevel, QRCodeModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}